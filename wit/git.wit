interface http {
    record http-request {
        url: string,
        headers: list<tuple<string, string>>
    }

    record http-response {
        status: u16,
        body: list<u8>
    }

    enum http-error {
        network,
        timeout,
        invalid-url,
        invalid-request
    }

    send: func(req: http-request) -> result<http-response, http-error>
}

interface config {
    get: func(key: string) -> option<string>
}

interface cache {
    set: func(key: string, value: list<u8>) -> ()
    get: func(key: string) -> option<list<u8>>
}

interface log {
    enum level {
        debug,
        info,
        warn,
        error
    }

    log: func(level: level, msg: string) -> ()
}

interface data {
   use self.http.{http-error}

   record commit {
      message: string,
      timestamp: u64
  }

  variant enrichment {
      link(string),
      none
  }

  variant enrichment-error {
    http-error(http-error),
    json-error(string)
  }

  enrich: func(commit: commit) -> result<enrichment, enrichment-error>
}

default world gitlog {

  import http: self.http
  import config: self.config
  import log: self.log
  import cache: self.cache

  export data: self.data

}